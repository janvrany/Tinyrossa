changequote(`[',`]')
define([TR],[])
define([ILProp1],[])
define([ILProp2],[])
define([ILProp3],[])
define([ILChildProp],[])
define([OPCODE_NAME], [translit($1, [A-Z], [a-z])])

dnl
dnl ### TRILOpcodes pool definition ###
dnl
dnl OPCODE_MACRO(\
dnl   $1  /* .opcode               = */ aconst, \
dnl   $2  /* .name                 = */ &quot;aconst&quot;, \
dnl   $3  /* .properties1          = */ ILProp1::LoadConst, \
dnl   $4  /* .properties2          = */ ILProp2::ValueNumberShare, \
dnl   $5  /* .properties3          = */ ILProp3::LikeUse, \
dnl   $6  /* .properties4          = */ 0, \
dnl   $7  /* .dataType             = */ TR::Address, \
dnl   $8  /* .typeProperties       = */ ILTypeProp::Reference, \
dnl   $9  /* .childProperties      = */ ILChildProp::NoChildren, \
dnl   $10 /* .swapChildrenOpCode   = */ TR::BadILOp, \
dnl   $11 /* .reverseBranchOpCode  = */ TR::BadILOp, \
dnl   $12 /* .booleanCompareOpCode = */ TR::BadILOp, \
dnl   $13 /* .ifCompareOpCode      = */ TR::BadILOp, \
dnl   $14 /* .description          =    load address constant (zero value means NULL) */ \

define([OPCODE_MACRO], [OPCODE_NAME($1)])

"{ Package: 'Tinyrossa' }"

"{ NameSpace: Smalltalk }"

SharedPool subclass:#TRILOpcodes
	instanceVariableNames:''
	classVariableNames:'invalid
	include(opcodes.m4)
	'
	poolDictionaries:'TRDataTypes TRILOpcodeProps1 TRILOpcodeProps2 TRILOpcodeProps3'
	category:'Tinyrossa-IL'
!
undefine([OPCODE_MACRO])

dnl
dnl ### TRILOpcodes pool initializer ###
dnl

define([ONE_CHILD],[{ $1 }])
define([TWO_CHILD],[{ $1 . $2 }])
define([THREE_CHILD],[{ $1 . $2 . $3 }])

define([TWO_SAME_CHILD],[TWO_CHILD($1, $1)])
define([THREE_SAME_CHILD],[THREE_CHILD($1, $1, $1)])

!TRILOpcodes class methodsFor:'initialization'!

initialize
    "Automatically generated by opcodesgen. DO NOT EDIT!!"

    | UnspecifiedChildType NoType NoChildren Unspecified"Children" IndirectCallType BadILOp |

    "Local constants used (generated) initialization"
    UnspecifiedChildType := TRDataTypeUnspecified new.
    NoType := Void.
    NoChildren := #().
    Unspecified"Children" := nil.
    IndirectCallType := Unspecified"Children".

    invalid := BadILOp := TRILOpcode new.

define([OPCODE_MACRO], [    OPCODE_NAME($1) := TRILOpcode new.])
include(opcodes.m4)
undefine([OPCODE_MACRO])

define([OPCODE_MACRO], [    OPCODE_NAME($1) initializeFrom: { 'OPCODE_NAME($1)' . $7 . $3 . $4 . $5 . $9 . $10 . $11 . $12 . $13 }.])
    invalid initializeFrom: { 'invalid' . NoType . 0 . 0 . 0 . Unspecified . BadILOp . BadILOp . BadILOp . BadILOp }.
include(opcodes.m4)
undefine([OPCODE_MACRO])
! !

TRILOpcodes initialize!
undefine([OPCODE_MACRO])

dnl
dnl ### TRILBuilder API ###
dnl

define([OPCODE_MACRO],[

OPCODE_NAME($1): arguments
    "Automatically generated by opcodesgen. DO NOT EDIT!!"

    ^ self build: OPCODE_NAME($1) arguments: arguments
!
])
!TRILBuilder methodsFor:'building'!
include(opcodes.m4)
!
undefine([OPCODE_MACRO])


dnl
dnl ### TRILEvaluator API ###
dnl

define([OPCODE_EVALUATOR],[[evaluate_]OPCODE_NAME($1)])
define([OPCODE_MACRO],[

OPCODE_EVALUATOR($1): node
    self subclassResponsibility.
!
])
!TRILEvaluator methodsFor:'evaluation'!
include(opcodes.m4)
!
undefine([OPCODE_MACRO])

dnl
dnl ### TRILEvaluator class initializer ###
dnl

define([OPCODE_MACRO], [    OPCODE_NAME($1) . [#]OPCODE_EVALUATOR($1): .])
!TRILEvaluator class methodsFor:'initialization'!

initialize
    "Automatically generated by opcodesgen. DO NOT EDIT!!"

    EvaluatorTable := IdentityDictionary withKeysAndValues:
    {
include(opcodes.m4)
    }.

! !

TRILEvaluator initialize!

dnl
dnl ### TRILWalker API ###
dnl
define([OPCODE_EVALUATOR],[[evaluate_]OPCODE_NAME($1)])
define([OPCODE_MACRO],[

OPCODE_EVALUATOR($1): node
    self evaluateChildren: node.
    ^ node
!
])
!TRILWalker methodsFor:'evaluation'!
include(opcodes.m4)
!
undefine([OPCODE_MACRO])
